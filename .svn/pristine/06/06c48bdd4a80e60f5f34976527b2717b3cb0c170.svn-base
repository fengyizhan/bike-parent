package com.tiamaes.bike.api.authority.user.service;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.StandardPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.tiamaes.bike.api.authority.user.persistence.UserMapper;
import com.tiamaes.bike.common.bean.system.User;
import com.tiamaes.mybatis.PageHelper;
import com.tiamaes.mybatis.Pagination;
import com.tiamaes.security.provisioning.MutableUser;

@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class UserService implements UserServiceInterface {
	@SuppressWarnings("unused")
	private static Logger logger = LogManager.getLogger(UserService.class);

	@Resource
	private UserMapper userMapper;

	@Resource
	private StandardPasswordEncoder passwordEncoder;

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public boolean checkUserName(String username) {
		return userMapper.hasExists(username);
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public UserDetails loadUserByUsername(String username) {
		Assert.notNull(username, "用户名不能为空!");
		User user = userMapper.loadUserDetailByUsername(username);

		if (user != null) {
			return user;
		}
		return null;
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public User getUserById(String id) {
		Assert.notNull(id, "用户编号不能为空!");
		User user = userMapper.getUserById(id);
		return user;
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public List<User> getAllUsers(User user, Pagination<?> pagination) {
		PageHelper.startPage(pagination);
		return userMapper.getAllUsers(user);
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public int getTotalOfUsers(User user) {
		return userMapper.getTotalOfUsers(user);
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public User addUser(User user) {
		Assert.notNull(user);
		Assert.isTrue(!userMapper.hasExists(user.getUsername()), "用户名已经存在");
		String password = passwordEncoder.encode("123456");
		user.setPassword(password);
		userMapper.addUser(user);
		if (user.getAuthorities() != null && user.getAuthorities().size() > 0) {
			userMapper.addUserRoles(user);
		}
		return userMapper.loadUserDetailByUsername(user.getUsername());
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public User updateUser(User user) {
		Assert.notNull(user);
		Assert.notNull(user.getUsername(), "用户名称不能为空");

		User source = userMapper.loadUserDetailByUsername(user.getUsername());
		try {
			BeanUtils.copyProperties(source, user);
		} catch (Exception e) {
			e.printStackTrace();
		}

		userMapper.updateUser(source);
		/*if (userMapper.existsUserInfo(source)) {
			userMapper.updateUserSettings(source);
		} else {
			userMapper.addUserSettings(source);
		}*/
		userMapper.deleteUserRoles(source);
		if (source.getAuthorities() != null && source.getAuthorities().size() > 0) {
			userMapper.addUserRoles(source);
		}
		return source;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteUser(String username) {
		User user = userMapper.loadUserDetailByUsername(username);
		Assert.notNull(user, "用户不能为空!");
		
		userMapper.deleteUser(user);
		userMapper.deleteUserRoles(user);
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void upadatePassword(MutableUser user) {
		userMapper.updatePassword(user);
	}

	@Override
	public boolean hasRole(String authority) {
		return userMapper.hasRole(authority);
	}

	@Override
	public User loadUserDetailByUsername(String username) {
		return userMapper.loadUserDetailByUsername(username);
	}

}
