package com.tiamaes.bike.api.information.vehicle.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.SetOperations;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tiamaes.bike.api.information.command.service.CommandServiceInterface;
import com.tiamaes.bike.api.information.driver.service.DriverService;
import com.tiamaes.bike.api.information.vehicle.service.VehicleServiceInterface;
import com.tiamaes.bike.common.RedisKey;
import com.tiamaes.bike.common.WalletUserServiceInterface;
import com.tiamaes.bike.common.bean.Parameters;
import com.tiamaes.bike.common.bean.Result;
import com.tiamaes.bike.common.bean.command.UnlockCommand;
import com.tiamaes.bike.common.bean.information.Park;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.common.bean.integrated.BorrowRecord;
import com.tiamaes.bike.common.bean.system.PointVector;
import com.tiamaes.bike.common.bean.system.User.Stage;
import com.tiamaes.bike.common.bean.wallet.WalletUser;
import com.tiamaes.bike.common.utils.GetAddress;
import com.tiamaes.bike.common.utils.UUIDGenerator;
import com.tiamaes.bike.messages.Push;
import com.tiamaes.logger.Operation;
import com.tiamaes.logger.TiamaesLogger;
import com.tiamaes.mybatis.PageInfo;
import com.tiamaes.mybatis.Pagination;
import com.tiamaes.security.core.annotation.CurrentUser;
import com.tiamaes.security.core.userdetails.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/information/vehicle")
@Api(tags = {"vehicle"}, description = "车辆信息管理")
public class VehicleController {
	private static Logger logger = LogManager.getLogger(VehicleController.class);
	@Autowired
	private VehicleServiceInterface vehicleService;
	@Resource
	private StringRedisTemplate stringRedisTemplate;
	@Resource(name = "jsonRedisTemplate")
	private RedisTemplate<String,BorrowRecord> borrowRecordRedisTemplate;
	@Resource(name = "jsonRedisTemplate")
	private RedisTemplate<String,Vehicle> vehicleRedisTemplate;
	@Resource
	private Push pushUtil;
	@Resource
	private WalletUserServiceInterface walletUserService;
	@Resource
	private DriverService driverService;
	@Resource
	private CommandServiceInterface commandService;
	@Autowired
	@Qualifier("objectMapper")
	private ObjectMapper objectMapper;
	/**
	 * 列表页面，分页查询
	 * @param vehicle
	 * @param pathVariable
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "车辆列表", notes = "分页查询车辆列表数据")
	@ApiImplicitParam(name = "vehicle", value = "车辆实体", required = true, dataType = "Vehicle")
	@RequestMapping(value = {"/page/{number:\\d+}", "/page/{number:\\d+}/{pageSize:\\d+}"}, method = RequestMethod.POST)
	public @ResponseBody PageInfo<Vehicle> page(@RequestBody Vehicle vehicle, @PathVariable Map<String,String> pathVariable, @CurrentUser User operator) {
		int number = pathVariable.get("number") == null ? 1 : Integer.parseInt(pathVariable.get("number"));
		int pageSize = pathVariable.get("pageSize") == null ? 20 : Integer.parseInt(pathVariable.get("pageSize"));
		Pagination<Vehicle> pagination = new Pagination<>(number, pageSize);
		//封装参数
		Parameters<Vehicle> parameters = new Parameters<>();
		parameters.setModel(vehicle);
		parameters.setUser(operator);
		
		List<Vehicle> list = vehicleService.getListOfVehicles(parameters, pagination);
		return new PageInfo<Vehicle>(list);
	}
	
	/**
	 * 查询车辆详情
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	@ApiOperation(value = "车辆详情", notes = "根据id查询车辆详情",response = Vehicle.class)
	public @ResponseBody Vehicle get(@PathVariable("id")String id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(id);
		}
		return vehicleService.getVehicleById(id);
	}
	
	/**
	 * 根据simNo查询车辆详情(外部接口文档)
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/bySimNo/{simNo}", method = RequestMethod.GET)
	@ApiOperation(value = "车辆详情", notes = "根据simNo查询车辆详情",response = Vehicle.class)
	public @ResponseBody Vehicle getVehicleBySimNo(@PathVariable("simNo")String simNo, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(simNo);
		}
		return vehicleService.getVehicleBySimNo(simNo);
	}
	/**
	 * 校验车牌号是否存在
	 * @param id
	 * @param name
	 * @return
	 */
	@RequestMapping(value = {"/checkname/{name}", "/checkname/{name}/{id}"}, method = RequestMethod.GET)
	@ApiOperation(value = "校验车牌号", notes = "校验车牌号是否存在")
	public @ResponseBody Map<String, Object> checkname(@PathVariable Optional<String> id, @PathVariable("name")String name) {
		Map<String, Object> result = new HashMap<>();
		if(id.isPresent()){
			result.put("state", false);
		}else{
			result.put("state", vehicleService.hasExists(name));
		}
		return result;
	}
	
	/**
	 * 添加车辆信息
	 * @param vehicle
	 * @param operator
	 * @return
	 */
	@TiamaesLogger(operation = Operation.ADD)
	@RequestMapping(method = RequestMethod.PUT, produces = { "application/json" })
	@ApiOperation(value = "新增车辆信息", notes = "新增车辆信息",response = Vehicle.class)
	@ApiImplicitParam(name = "vehicle", value = "车辆实体", required = true, dataType = "Vehicle")
	public @ResponseBody Vehicle add(@RequestBody Vehicle vehicle, @CurrentUser User operator){
		if(logger.isDebugEnabled()) {
			logger.debug(vehicle.toString());
		}
		vehicle.setId(vehicleService.getId().toString());
		vehicle.setCreateDate(new Date());
		vehicle = vehicleService.addVehicle(vehicle);
		return vehicleService.getVehicleById(vehicle.getId());
	}
	
	/**
	 * 修改车辆信息
	 * @param vehicle
	 * @param id
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "更新车辆信息", notes = "更新车辆信息",response = Vehicle.class)
	@ApiImplicitParam(name = "vehicle", value = "车辆实体", required = true, dataType = "Vehicle")
	@TiamaesLogger(operation = Operation.UPDATE)
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, produces = { "application/json" })
	public @ResponseBody Vehicle update(@RequestBody Vehicle vehicle, @PathVariable("id")String id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){	
			logger.debug(vehicle.toString());
		}
		vehicle = vehicleService.updateVehicle(vehicle);
		return vehicle;
	}
	
	/**
	 * 删除车辆信息
	 * @param id
	 * @param operator
	 */
	@ApiOperation(value = "删除车辆", notes = "删除车辆信息",response = Vehicle.class)
	@TiamaesLogger(operation = Operation.DELETE)
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = { "application/json" })
	public @ResponseBody Vehicle delete(@PathVariable("id")String id, @CurrentUser User operator) {
		if (logger.isDebugEnabled()) {
			logger.debug(id);
		}
		Vehicle vehicle = vehicleService.getVehicleById(id);
		vehicleService.deleteVehicle(vehicle);
		return vehicle;
	}
	
	/**
	 * 车辆状态,设备状态下拉列表初始化
	 * @return
	 */
	@ApiOperation(value = "车辆状态,设备状态下拉列表初始化", notes = "车辆状态,设备状态下拉列表初始化")
	@RequestMapping(value = "/init", method = RequestMethod.GET)
	public @ResponseBody Map<String,Object> init() {
		Map<String,Object> result = new HashMap<>();
		result.put("runStatuses", PointVector.Info.RunState.values());
		result.put("state", Vehicle.State.values());
		return result;
	}
	
	@RequestMapping(value = "/{bikeId}/putInTime", method = RequestMethod.GET)
	@ApiOperation(value = "获取指定车辆的投放时长", notes = "获取指定车辆的投放时长")
	public @ResponseBody Map<String, String> bikeBorrowPutInTime(@PathVariable("bikeId") int bikeId) {
		Map<String, String> result = new HashMap<>();
		result.put("putInTime", vehicleService.getBikePutInTime(bikeId));
		return result;
	}
	
	/**
	 * 通过车牌号模糊查询所有车辆
	 * @param name
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "查询车辆", notes = "通过车牌号模糊查询所有车辆")
	@RequestMapping(value = "/search/{name}", method = RequestMethod.GET)
	public @ResponseBody List<Vehicle> search(@PathVariable("name")String name, @CurrentUser User operator) {
		return vehicleService.getAllVehiclesWithPlateNo(name);
	}
	
	/**
	 * 获取车辆各个状态的数量
	 * @return
	 * @throws Exception
	 */
	@ApiOperation(value = "车辆状态统计", notes = "获取车辆在线，离线，停车的数量")
	@RequestMapping(value = "/onlineCount",method = RequestMethod.GET)
	public Map<String, Long> getOnlineCount() throws Exception {
		Map<String,Long> result = new HashMap<>();
		//统计全部在线，停车，离线的车辆
		SetOperations<String, String> setOperator = stringRedisTemplate.opsForSet();
		long onlines = 0;
		long offlines = 0;
		long parkings = 0;
		
		onlines = setOperator.size(RedisKey.VEHICLES_ONLINE);
		offlines = setOperator.size(RedisKey.VEHICLES_OFFLINE);
		parkings = setOperator.size(RedisKey.VEHICLES_PARKING);
		
		result.put("onlines", onlines);
		result.put("offlines", offlines);
		result.put("parkings", parkings);
		
		return result;
	}
	
	/**
	 * 统计已注册的车辆数
	 * @return
	 * @throws Exception
	 */
	@ApiOperation(value = "已注册车辆统计", notes = "统计已注册的车辆数")
	@RequestMapping(value = "/registeredCount",method = RequestMethod.GET)
	public int getRegisteredCount()throws Exception{
		return vehicleService.getRegisteredCount();
	}
	
	/**
	 * 根据坐标点获取
	 * @param point
	 * @return
	 */
	@ApiOperation(value = "经纬度转地址", notes = "根据经纬度获取地址")
	@RequestMapping(value = "/getAddress/{point}", method = RequestMethod.GET)
	public Map<String, String> getAddress(@PathVariable("point")String point) {
		Map<String, String> result = new HashMap<>();
		String address = "";
		if (StringUtils.isNotBlank(point) && point.indexOf(",") > -1) {
			String[] points = point.split(",");
			String lng = points[0].replace("-", "");
			String lat = points[1].replace("-", "");
			address = GetAddress.generateAddress(lat, lng);
		}
		result.put("address", address);
		return result;
	}
	
	/**
	 * 获取登陆用户当前借车记录
	 * @param username
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/{username}/currentBorrowRecord", method = RequestMethod.GET)
	@ApiOperation(value = "获取登陆用户当前借车记录", notes = "获取登陆用户当前借车记录",response = BorrowRecord.class)
	public @ResponseBody Result currentBorrowRecord(@PathVariable("username")String username, @CurrentUser User operator) 
	{
		Result result=new Result();
		Map<String,Object> dataMap=result.getData();
		BorrowRecord borrowRecord=(BorrowRecord)borrowRecordRedisTemplate.opsForHash().get(RedisKey.DRIVERS_BORROW_RECORDS,username);
		if(borrowRecord==null)
		{
			result.setMessage("当前用户不存在正在租车记录！");
			result.setSuccess(false);
			return result;
		}
		dataMap.put("borrowRecord",borrowRecord);
		return result;
	}
	/**
	 * 扫码借车
	 * @param username
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/{username}/scanBorrow/{id}", method = RequestMethod.GET)
	@ApiOperation(value = "扫码借车", notes = "根据id扫码借车",response = Vehicle.class)
	public @ResponseBody Result scanBorrow(@PathVariable("username")String username,@PathVariable("id")String id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(id);
		}
		Result result=new Result();
		Map<String, Object> dataMap=result.getData();
		/**
		 * 首先判断当前用户的钱包信息，如果余额为负，不能开车
		 */
		com.tiamaes.bike.common.bean.system.User driver=new com.tiamaes.bike.common.bean.system.User();
		try {
			WalletUser walletUser=walletUserService.getWalletUserByUsername(username);
			if(walletUser!=null)
			{
				float balance=walletUser.getBalance();
				if(balance<=0)
				{
					result.setSuccess(false);
					result.setMessage("钱包余额不足，请充值后再操作！");
					return result;
				}
			}
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		//TODO 判断当前人员状态，如果不是【已实名认证】状态，则提示’先实名认证后才可以使用车辆‘
		driver=driverService.getDriverByUsername(username);
		Stage userState=driver.getStage();
		if(!Stage.CERTIFICATED.equals(userState))
		{
			result.setSuccess(false);
			result.setMessage("【实名认证】用户后才能使用车辆！");
			return result;
		}
		//检查当前人员是否已经租借一辆车
		boolean userHasBorrowABike=vehicleRedisTemplate.opsForHash().hasKey(RedisKey.DRIVERS_BORROW_RECORDS,username);
		if(userHasBorrowABike)
		{
			result.setSuccess(false);
			result.setMessage("每个用户同时只能租借一辆车！");
			return result;
		}
		try{
			Vehicle vehicle=vehicleService.getVehicleById(id);
			/* debug using
			if(1==1)
			{
				vehicle.getInfo().setRunState(PointVector.Info.RunState.CANBORROW);
				vehicleService.updateVehicle(vehicle);
				return result;
			}*/
			if(vehicle==null)
			{
				result.setSuccess(false);
				result.setMessage("车辆信息有误，请检查！");
				return result;
			}
			//1.判断车辆基本状态，如电量，硬件等；如果不正常提示
			Vehicle.State vehicleState=vehicle.getState();
			if(vehicleState!=null && !Vehicle.State.NORMAL.equals(vehicleState))
			{
				result.setSuccess(false);
				result.setMessage("系统检测到车辆状态不正常，无法使用，请重试或更换其他车辆！");
				return result;
			}
			
			//2.判断车辆是否正在使用或预约中，如果使用中提示
			PointVector.Info vehicleInfo=vehicle.getInfo();
			if(vehicleInfo!=null)
			{
				PointVector.Info.RunState runState=vehicleInfo.getRunState();
				if(runState!=null && !PointVector.Info.RunState.CANBORROW.equals(runState))
				{//如果不是【可借用】状态，都是不可用的，提示用户
					result.setSuccess(false);
					result.setMessage("系统提示："+runState.getName()+"，不允许使用，请重试或更换其他车辆！");
					return result;
				}
				PointVector.Info.State basicState=vehicleInfo.getState();
				if(PointVector.Info.State.LOWPOWER.equals(basicState))
				{
					result.setSuccess(false);
					result.setMessage("系统提示：检测到当前车辆电量过低，不建议使用，请更换其他车辆！");
					return result;
				}
				if(PointVector.Info.State.OFFLINE.equals(basicState))
				{
					result.setSuccess(false);
					result.setMessage("系统提示：检测到当前车辆处于【离线状态】，不允许使用，请更换其他车辆！");
					return result;
				}
				/**
				 * 更新车辆状态为【已借出】
				 */
				vehicleInfo.setRunState(PointVector.Info.RunState.BORROWED);
			}
			dataMap.put("vehicle", vehicle);
			/**
			 * 3.生成借车记录
			 * 当解锁开车时，车辆所在位置为【起始场区】；
			 * 当还车关闭时，车辆所在位置为【结束场区】；
			 * 车辆当前所在的停车区是由【通讯程序】动态更新的，后台只管取用即可
			 */
			Park startPark=vehicle.getPark();
			/**
			 * 生成租借记录缓存，其余记录的字段，当还车流程结束后，会由【通讯程序】补充完整
			 */
			String borrowId=UUIDGenerator.getUUID();
			//修改车辆租借关联
			vehicle.setBorrowId(borrowId);
			vehicleService.updateVehicle(vehicle);
			
			BorrowRecord borrowRecord=new BorrowRecord();
			borrowRecord.setId(borrowId);
			borrowRecord.setUser(driver);
			Date startTime=new Date();
			borrowRecord.setCreateDate(startTime);
			borrowRecord.setStartTime(startTime);
			borrowRecord.setVehicle(vehicle);
			borrowRecord.setStartPark(startPark);
			borrowRecordRedisTemplate.opsForHash().put(RedisKey.DRIVERS_BORROW_RECORDS,username,borrowRecord);
			/*
			 * 给用户发送一个系统通知
			 */
			Result unlockResult=new Result();
			unlockResult.setSuccess(true);
			unlockResult.setMessage("车辆解锁成功，开始计时");
			unlockResult.setType(Result.TEXT_TYPE);
			String sendLog_unlockResult=pushUtil.sendMsg(objectMapper.writeValueAsString(unlockResult),username);
			logger.info("扫码开车，极光推送："+sendLog_unlockResult);
			/**
			 * TODO 可以解锁，通知通讯程序后续处理
			 */
			UnlockCommand unlockCommand=new UnlockCommand();
			unlockCommand.setSerialNo(new Date().getTime());
			unlockCommand.setTerminalId(Integer.valueOf(vehicle.getId()));
		}catch(Exception e)
		{
			e.printStackTrace();
			result.setMessage("扫码借车异常！");
			result.setSuccess(false);
		}
		return result;
	}
}
