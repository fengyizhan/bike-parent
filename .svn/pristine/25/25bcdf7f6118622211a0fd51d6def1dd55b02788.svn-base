package com.tiamaes.bike.storage;

import static org.junit.Assert.assertNotNull;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.test.context.junit4.SpringRunner;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tiamaes.bike.common.bean.connector.VehicleOnOffLineInfo;
import com.tiamaes.bike.common.bean.connector.VehicleOnOffLineInfo.State;
import com.tiamaes.bike.common.bean.information.Company;
import com.tiamaes.bike.common.bean.information.Department;
import com.tiamaes.bike.common.bean.information.Driver;
import com.tiamaes.bike.common.bean.information.Terminal;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.storage.service.VehicleOnOffLineInfoServiceInterface;

@RunWith(SpringRunner.class)
@SpringBootTest
public class VehicleOnOffLineInfoServiceTest {
	
	private static Logger logger = LogManager.getLogger(VehicleOnOffLineInfoServiceTest.class);
	
	@Autowired
	private ObjectMapper objectMapper;
	
	@Autowired
	@Qualifier("kafkaTemplate")
	private KafkaTemplate<String, String> kafkaTemplate;
	
	@Before
	public void before() {
		assertNotNull("KafkaTemplate not found...");
	}
	
	@Resource
	private VehicleOnOffLineInfoServiceInterface service;
	
	@Test
	public void addVehicleOnLineInfo() throws Exception {
		VehicleOnOffLineInfo vehicleOnOffLineInfo = new VehicleOnOffLineInfo();
		Vehicle vehicle = new Vehicle();
		vehicle.setId("ac11903768ab454aa28c12f7ab243ed8");
//		vehicle.setCarNo("豫A8888");
		Company company = new Company();
		company.setId("f2287cf80a8d4b108d8ff2e2620d9220");
		company.setName("重工新能源");
		Department department = new Department();
		department.setId("a409f39c1e73471f9d5beaf97a2d6825");
		department.setName("渣土1部");
		Terminal terminal = new Terminal();
		terminal.setSimNo("015936876532");
//		vehicle.setCompany(company);
//		vehicle.setDepartment(department);
//		vehicle.setTerminal(terminal);
		Driver driver = new Driver();
		driver.setIdentityCard("410427198805063214");
//		driver.setName("李详");
//		driver.setTelephone("15623560123");
		vehicleOnOffLineInfo.setVehicle(vehicle);
		vehicleOnOffLineInfo.setDriver(driver);
		vehicleOnOffLineInfo.setState(State.ONLINE);
		
		service.addVehicleOnOffLineInfo(vehicleOnOffLineInfo);
		if (logger.isDebugEnabled()) {
			logger.debug("保存车辆上线信息" + objectMapper.writeValueAsString(vehicleOnOffLineInfo));
		}
	}
	
	@Test
	public void addVehicleOffLineInfo() throws Exception {
		VehicleOnOffLineInfo vehicleOnOffLineInfo = new VehicleOnOffLineInfo();
		Vehicle vehicle = new Vehicle();
		vehicle.setId("ac11903768ab454aa28c12f7ab243ed8");
//		vehicle.setCarNo("豫A8888");
		Company company = new Company();
		company.setId("f2287cf80a8d4b108d8ff2e2620d9220");
		company.setName("重工新能源");
		Department department = new Department();
		department.setId("a409f39c1e73471f9d5beaf97a2d6825");
		department.setName("渣土1部");
		Terminal terminal = new Terminal();
		terminal.setSimNo("015936876532");
//		vehicle.setCompany(company);
//		vehicle.setDepartment(department);
//		vehicle.setTerminal(terminal);
		Driver driver = new Driver();
		driver.setIdentityCard("410427198805063214");
//		driver.setName("李详");
//		driver.setTelephone("15623560123");
		vehicleOnOffLineInfo.setVehicle(vehicle);
		vehicleOnOffLineInfo.setDriver(driver);
		vehicleOnOffLineInfo.setState(State.OFFLINE);
		
		String id = service.addVehicleOnOffLineInfo(vehicleOnOffLineInfo);
		service.deleteVehicleOnOffLineInfo(id);
		
		if (logger.isDebugEnabled()) {
			logger.debug("保存车辆上线信息" + objectMapper.writeValueAsString(vehicleOnOffLineInfo));
		}
	}
	
	@Test
	@Ignore
	public void vehicleOnOffLineInfoKafkaTest() {
		for (int i = 0; i < 56; i++) {
			VehicleOnOffLineInfo vehicleOnOffLineInfo = new VehicleOnOffLineInfo();
			if (i % 2 == 0) {
				vehicleOnOffLineInfo.setState(State.ONLINE);
			} else {
				vehicleOnOffLineInfo.setState(State.OFFLINE);
			}
			Vehicle vehicle = new Vehicle();
			vehicle.setId("d196b09f835842d79c993d961d94849f");
//			vehicle.setCarNo("京Q23456");
//			vehicle.setSimCode("015800020022");
			Company company = new Company();
			company.setId("a7db3db0e0a541b38e2e71e1449f906f");
			company.setName("公交十二公司");
			Department department = new Department();
			department.setId("b8c2d49da0334091bacd21adf08ac54c");
			department.setName("一车队");
//			vehicle.setCompany(company);
//			vehicle.setDepartment(department);
			Driver driver = new Driver();
			driver.setIdentityCard("4101064484231");
//			driver.setName("张三");
//			driver.setTelephone("18513974682");
			vehicleOnOffLineInfo.setVehicle(vehicle);
			vehicleOnOffLineInfo.setDriver(driver);
			kafkaTemplate.send(MessageBuilder.withPayload(vehicleOnOffLineInfo).setHeader(KafkaHeaders.TOPIC, vehicleOnOffLineInfo.getClass().getName()).build());
		}
		
	}

}
