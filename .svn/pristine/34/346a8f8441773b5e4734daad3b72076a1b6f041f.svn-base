package com.tiamaes.bike.security;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RegexRequestMatcher;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tiamaes.bike.common.bean.system.User;

@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	
	@Resource
	private ObjectMapper jacksonObjectMapper;
	@Autowired
	private UserServiceInterface userService;

	@Bean
	protected LoginUrlAuthenticationEntryPoint loginUrlAuthenticationEntryPoint(){
		return new LoginUrlAuthenticationEntryPoint("/login.html");
	}
	
	@Bean
	protected RegexRequestMatcher loginRequestMatcher(){
		return new RegexRequestMatcher("/login", "POST");
	}
	
	@Bean
	protected LoginSuccessHandler loginSuccessHandler() {
		LoginSuccessHandler handler = new LoginSuccessHandler();
		handler.setObjectMapper(jacksonObjectMapper);
		return handler;
	}
	
	@Bean
	protected LoginFailureHandler loginFailureHandler() {
		return new LoginFailureHandler();
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		LoginUrlAuthenticationEntryPoint loginUrlEntryPoint = loginUrlAuthenticationEntryPoint();
		http.authorizeRequests()
            .antMatchers("/resources/**", "/favicon.ico", "/jcaptcha", "/doc/**").permitAll()
            .antMatchers("/api/information/park/aroundInfo").permitAll()
            .anyRequest().authenticated()
            .and()
        .formLogin()
            .loginPage("/login.html")
            .loginProcessingUrl("/login")
            .usernameParameter("username")
            .passwordParameter("mypwd")
            .successHandler(loginSuccessHandler())
            .failureHandler(loginFailureHandler())
            .permitAll()
            .and()
        .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
        	.disable()
        .httpBasic()
        	.authenticationEntryPoint(loginUrlEntryPoint)
        	.and()
        .exceptionHandling()
        	.authenticationEntryPoint(loginUrlEntryPoint)
        	.and()
		.logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/login.html").deleteCookies("SESSION");
	}
	
	@Bean
	protected UserDetailsService userDetailsService(){
		return new UserDetailsService() {
			@Override
			public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
				User user = userService.loadUserByUsername(username);
				if(user == null){
					throw new UsernameNotFoundException("用户不存在!");
				}
				return user;
			}
		};
	}
	
	@FeignClient("authority")
	public interface UserServiceInterface {
		@RequestMapping(method = RequestMethod.GET, value = "/authority/user/load/{username}")
		public User loadUserByUsername(@PathVariable("username") String username);
	}
}
