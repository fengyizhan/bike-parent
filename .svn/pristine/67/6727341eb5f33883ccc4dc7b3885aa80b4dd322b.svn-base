package com.tiamaes.bike.wallet.information.pay.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.tiamaes.bike.alipay.config.AlipayConfig;
import com.tiamaes.bike.alipay.util.MD5;
import com.tiamaes.bike.common.bean.Result;
import com.tiamaes.bike.common.bean.pay.PayRecharge;
import com.tiamaes.bike.wallet.information.pay.service.PayRechargeServiceInterface;
import com.tiamaes.mybatis.PageInfo;
import com.tiamaes.mybatis.Pagination;
import com.tiamaes.security.core.annotation.CurrentUser;
import com.tiamaes.security.core.userdetails.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/information/payrecharge")
@Api(tags = {"payrecharge"}, description = "用户支付充值记录管理")
public class PayRechargeController {
	
	private static Logger logger = LogManager.getLogger(PayRechargeController.class);
	@Resource
	private PayRechargeServiceInterface payRechargeService;
	
	/**
	 * 用户充值方式下拉列表
	 * @return
	 */
	@ApiOperation(value = "用户充值方式列表初始化", notes = "用户充值方式下拉列表初始化")
	@RequestMapping(value = "/init", method = RequestMethod.GET)
	public @ResponseBody Map<String,Object> init() {
		Map<String,Object> result = new HashMap<>();
		result.put("styles", PayRecharge.Style.values());
		return result;
	}
	
	/**
	 * 根据用户名获取用户充值记录信息
	 * @param username
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "用户线上支付充值记录列表", notes = "根据用户名获取用户充值记录列表")
	@RequestMapping(value = {"/page/{number:\\d+}","/page/{number:\\d+}/{pageSize:\\d+}"}, method = RequestMethod.POST)
	public @ResponseBody PageInfo<PayRecharge> get(@RequestBody PayRecharge payRecharge, @PathVariable Map<String,String> pathVariable, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(payRecharge.getUsername());
		}
		int number = pathVariable.get("number") == null ? 1 : Integer.parseInt(pathVariable.get("number"));
		int pageSize = pathVariable.get("pageSize") == null ? 10 : Integer.parseInt(pathVariable.get("pageSize"));
		Pagination<PayRecharge> pagination = new Pagination<>(number, pageSize);
		List<PayRecharge> recharges = payRechargeService.getListOfPayRechargesByUsername(payRecharge, pagination);
		return new PageInfo<PayRecharge>(recharges);
	}
	
	/**
	 * 新增用户充值信息
	 * @param recharge
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "新增用户线上支付充值信息", notes = "新增用户线上支付充值信息",response = PayRecharge.class)
	@ApiImplicitParam(name = "payRecharge", value = "用户线上支付充值实体", required = true, dataType = "PayRecharge")
	@RequestMapping(method = RequestMethod.PUT)
	public @ResponseBody PayRecharge add(@RequestBody PayRecharge payRecharge, @CurrentUser User operator){
		if(logger.isDebugEnabled()){
			logger.debug(payRecharge.toString());
		}
		payRecharge.setId(payRechargeService.getId());
		payRecharge.setCreateTime(new Date());
		payRecharge = payRechargeService.addPayRecharge(payRecharge);
		return payRecharge;
	}
	
	/**
	 * 更新用户充值信息
	 * @param payRecharge
	 * @param username
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "更新用户线上支付充值记录", notes = "更新用户线上支付充值记录",response = PayRecharge.class)
	@ApiImplicitParam(name = "payRecharge", value = "用户线上支付充值实体", required = true, dataType = "PayRecharge")
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
	public @ResponseBody PayRecharge update(@RequestBody PayRecharge payRecharge, @PathVariable("id")Integer id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(payRecharge.toString());
		}
		payRecharge.setId(id);
		payRecharge = payRechargeService.updatePayRecharge(payRecharge);
		return payRecharge;
	}
	
	
	/**
	 * 生成线上支付充值订单信息
	 * @param style 支付方式
	 * @param money 金额
	 */
	@RequestMapping(value = "/payrecharge/{style}/{money}", method = RequestMethod.POST, produces = { "application/json" })
	@ApiOperation(value = "生成线上支付充值订单信息", notes = "生成线上支付充值订单信息")
	public @ResponseBody Result generateOrderInfo(@PathVariable("style") Integer style,@PathVariable("money") String money) {
		Result result=new Result();
		Assert.notNull(style,"支付方式不能为空");
		Assert.notNull(money,"支付金额不能为空");
		result.setSuccess(true);
		String payRechargeId=String.valueOf(payRechargeService.getId());
		String out_trade_no="BIKE_"+style+"_PAY_"+payRechargeId;
		StringBuffer sBuffer=new StringBuffer();
		// 商品详情
		//sBuffer.append( "body=" + "\"" + "车票购买" + "\"");
		// 参数编码， 固定值
		sBuffer.append( "_input_charset=\"utf-8\"");
		// 服务器异步通知页面路径
		sBuffer.append( "&notify_url=" + "\"" + AlipayConfig.callback_url + "\"");
		// 商户网站唯一订单号
		sBuffer.append( "&out_trade_no=" + "\"" + out_trade_no + "\"");
        // 签约合作者身份ID
		sBuffer.append("&partner=" + "\"" + AlipayConfig.partner + "\"");
		// 支付类型， 固定值
		sBuffer.append( "&payment_type=\"1\"");
        // 支付宝处理完请求后，当前页面跳转到商户指定页面的路径，可空
		//sBuffer.append( "&return_url=\"m.alipay.com\"");
        // 签约卖家支付宝账号
		sBuffer.append("&seller_id=" + "\"" + AlipayConfig.seller_id + "\"");
		// 服务接口名称， 固定值
		sBuffer.append( "&service=\"mobile.securitypay.pay\"");
        // 商品名称
		sBuffer.append( "&subject=" + "\"" + "共享单车钱包充值" + "\"");
        // 商品金额
		sBuffer.append( "&total_fee=" + "\"" + money + "\"");
        // 设置未付款交易的超时时间
        // 默认30分钟，一旦超时，该笔交易就会自动被关闭。
        // 取值范围：1m～15d。
        // m-分钟，h-小时，d-天，1c-当天（无论交易何时创建，都在0点关闭）。
        // 该参数数值不接受小数点，如1.5h，可转换为90m。
		//sBuffer.append( "&it_b_pay=\"30m\"");
        String orderInfo=sBuffer.toString();
        String privateKeyString=AlipayConfig.private_key;
        String signString=MD5.sign(orderInfo, privateKeyString,"UTF-8");
		sBuffer.append("&sign=\"" + signString + "\"&" + "sign_type=\"MD5\"");
		System.out.println("===============支付宝订单支付生成："+orderInfo);
		result.getData().put("orderinfo",orderInfo);
		return result;
	}
	
}
