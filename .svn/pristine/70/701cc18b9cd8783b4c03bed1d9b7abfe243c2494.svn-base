package com.tiamaes.bike.connector.handler;

import java.util.List;

import org.apache.commons.codec.binary.Hex;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.tiamaes.bike.common.bean.message.Message;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ByteToMessageDecoder;

public class EscapeProtocolDecoder extends ByteToMessageDecoder {
	private static Logger logger = LogManager.getLogger();

	@Override
	protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) {
		CompositeByteBuf buffer = Unpooled.compositeBuffer();
		// 将转义字符还原
		while (in.isReadable()) {
			short i = in.readUnsignedByte();
			if (i == 0x7d) {
				buffer.writeByte(in.readUnsignedByte() == 0x01 ? 0x7d : 0x7e);
			} else {
				buffer.writeByte(i);
			}
		}
		buffer.resetReaderIndex();
		// 校验码校验
		byte[] messageBytes = new byte[buffer.readableBytes()];
		
		buffer.readBytes(messageBytes);
		buffer.resetReaderIndex();
		if (checkCode(messageBytes)) {
			Message request = new Message();
			Message.Header header = request.new Header();
			header.setId(buffer.readUnsignedShort());
			int bodyProperties = buffer.readUnsignedShort();
			header.setChildPackage((bodyProperties & 0x2000) == 0x2000);
			header.setEnableRSA((bodyProperties & 0x0400) == 0x0400);
			header.setLength(bodyProperties & 0x03FF);
			byte[] simNoBytes = new byte[6];
			buffer.readBytes(simNoBytes);
			header.setSimNo(Hex.encodeHexString(simNoBytes));
			header.setSerialNo(buffer.readUnsignedShort());
			
			//消息包封装项
			if(header.isChildPackage()){
				header.setPacketTotal(buffer.readUnsignedShort());
				header.setPacketNo(buffer.readUnsignedShort());
			}
			request.setHeader(header);
			byte[] body = new byte[buffer.readableBytes() - 1];
			buffer.readBytes(body);
			request.setBody(body);
			if (logger.isTraceEnabled()) {
				logger.trace("[{}][{}][{}]", String.format("%04X", header.getId()), header.getSimNo(), Hex.encodeHexString(body));
			}
			out.add(request);
		}
	}

	/**
	 * 校验校验码
	 * 
	 * @param messageBytes
	 * @return
	 */
	private static boolean checkCode(byte[] messageBytes) {
		if (messageBytes.length >= 1) {
			byte xor = getCheckXor(messageBytes, 0, messageBytes.length - 1);
			byte realXor = messageBytes[messageBytes.length - 1];
			return xor == realXor;
		} else {
			return false;
		}
	}

	/**
	 * 获取校验和
	 * 
	 * @param data
	 * @param pos
	 * @param len
	 * @return
	 */
	private static byte getCheckXor(byte[] data, int pos, int len) {
		byte a = 0;
		for (int i = pos; i < len; i++) {
			a ^= data[i];
		}
		return a;
	}
}