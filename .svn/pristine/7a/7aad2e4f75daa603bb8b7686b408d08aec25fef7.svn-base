package com.tiamaes.bike.connector.protocol.handler;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tiamaes.bike.common.bean.connector.VehicleWarningInfo;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.common.bean.integrated.BorrowRecord;
import com.tiamaes.bike.common.bean.integrated.WarnCode;
import com.tiamaes.bike.common.bean.system.PointVector;
import com.tiamaes.bike.connector.protocol.message.Header;
import com.tiamaes.bike.connector.protocol.message.Message;
import com.tiamaes.bike.connector.protocol.message.Message8001;
import com.tiamaes.bike.connector.protocol.message.Message8001.Result;
import com.tiamaes.bike.connector.protocol.message.Received;
import com.tiamaes.bike.connector.protocol.message.Received0200;

import io.netty.channel.Channel;

/**
 * 停车点车辆信息汇报包0x0200
 * 
 * @author Chen
 *
 */
@Component
public class Protocol0200Handler implements ProtocolHandler<Received0200> {
	private static Logger logger = LogManager.getLogger(Protocol0200Handler.class);
	@Autowired
	@Qualifier("kafkaStringTemplate")
	private KafkaTemplate<String, String> kafkaStringTemplate;
	@Resource
	private ObjectMapper jsonObjectMapper;
	@Override
	public Message execute(Channel channel, Received received) throws Exception {
		Header header = received.getHeader();
		int terminalId = received.getHeader().getTerminalId();
		Received0200 received0200 = new Received0200(header, received.getBytes());
		//TODO 停车点车辆信息处理
			/**
		 * 将车辆状态锁状态set进PointVector.Info中
		 */
		PointVector.Info pointvector=new PointVector.Info();
		pointvector.setElectricity(received0200.getBody().getElectricity());
		pointvector.setRunState(received0200.getBody().getRunState());
		pointvector.setLock(received0200.getBody().isLock());
		//推送kafka
		kafkaStringTemplate.send(MessageBuilder.withPayload(pointvector).setHeader(KafkaHeaders.TOPIC, pointvector.getClass().getName()).build());

		/**
		 * 将车辆编号封装到Vehicle中
		 */
		Vehicle vehicle=new Vehicle();
		vehicle.setId(received0200.getBody().getBikeserial());
		/**
		 * 将车辆报警信息封装到list<VehicelWarningInfo>集合中
		 */
		VehicleWarningInfo vehiclewarn=new VehicleWarningInfo();
		vehiclewarn.setVehicle(vehicle);
		vehiclewarn.setDirectionType(received0200.getBody().getBikeupflag());

		for(int i=0;i<received0200.getBody().getWarning().size();i++){
			vehiclewarn.setWarnCode(received0200.getBody().getWarning().get(i));
				//推送到kafka
			kafkaStringTemplate.send(MessageBuilder.withPayload(vehiclewarn).setHeader(KafkaHeaders.TOPIC, vehiclewarn.getClass().getName()).build());

		}
	
			Message8001 response = new Message8001(header, Result.SUCCESS);
		if(logger.isDebugEnabled()){
			logger.debug("[8001][{}][{}] Location information has been processed.", terminalId);
		}
		return response;
	}

	
}
