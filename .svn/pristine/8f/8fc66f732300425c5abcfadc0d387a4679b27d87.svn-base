package com.tiamaes.bike.exporter.listener;

import java.io.File;
import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import com.tiamaes.bike.common.bean.integrated.AlarmRecord;
import com.tiamaes.bike.common.bean.integrated.DriverCardRecord;
import com.tiamaes.bike.common.bean.integrated.Export;
import com.tiamaes.bike.common.bean.integrated.OnlineRecord;
import com.tiamaes.bike.common.bean.integrated.PhotoRecord;
import com.tiamaes.bike.common.bean.integrated.Schedule;
import com.tiamaes.bike.common.bean.integrated.PileRecord;
import com.tiamaes.bike.common.bean.integrated.Task;
import com.tiamaes.bike.common.bean.integrated.TripRecord;
import com.tiamaes.bike.common.bean.integrated.Schedule.Progress;
import com.tiamaes.bike.common.utils.FTPClientUtils;
import com.tiamaes.bike.common.utils.FileUtils;
import com.tiamaes.bike.exporter.integrated.alarm.service.AlarmQueryServiceInterface;
import com.tiamaes.bike.exporter.integrated.driver.service.DriverCardRecordServiceInterface;
import com.tiamaes.bike.exporter.integrated.photo.service.PhotoRecordServiceInterface;
import com.tiamaes.bike.exporter.integrated.pile.service.PileQueryServiceInterface;
import com.tiamaes.bike.exporter.integrated.task.service.TaskServiceInterface;
import com.tiamaes.bike.exporter.integrated.trips.service.TripsQueryServiceInterface;
import com.tiamaes.bike.exporter.integrated.vehicle.service.VehicleQueryServiceInterface;

@Component
public class Listener {
	@SuppressWarnings("unused")
	private static Logger logger = LogManager.getLogger(Listener.class);
	
	@Value("${ftp.host}")
	private String host;	// 服务器路径
	@Value("${ftp.username}")
	private String username;// 服务器用户名
	@Value("${ftp.password}")
	private String password;// 服务器密码
	@Value("${ftp.filepath}")
	private String filepath;// 服务器excel文件夹路径
	@Value("${java.io.tmpdir}")
	private String tmpdir;// 本地临时文件目录
	
	@Autowired
	private AlarmQueryServiceInterface alarmQueryService;
	@Autowired
	private DriverCardRecordServiceInterface driverCardRecordService;
	@Autowired
	private PhotoRecordServiceInterface photoRecordService;
	@Autowired
	private PileQueryServiceInterface pileQueryService;
	@Autowired
	private TripsQueryServiceInterface tripsQueryService;
	@Autowired
	private VehicleQueryServiceInterface vehicleQueryService;
	@Autowired
	private TaskServiceInterface taskService;
	
	@Autowired
	@Qualifier("kafkaTemplate")
	private KafkaTemplate<String, String> kafkaTemplate;
	
	@KafkaListener(id = "listen1", topics = "com.tiamaes.bike.common.bean.integrated.Task")
	public void listen1(@Payload Task task) throws Exception {
		Schedule schedule = taskFirstStep(task);
		taskSecondStep(task, schedule);
		taskThirdStep(task, schedule);
	}
	
	private Schedule taskFirstStep(Task task) {
		task.setProgress(Progress.ZERO);
		Schedule schedule = new Schedule(task);
		kafkaTemplate.send(MessageBuilder.withPayload(schedule).setHeader(KafkaHeaders.TOPIC, schedule.getClass().getName()).build());
		return schedule;
	}
	
	private void taskSecondStep(Task task, Schedule schedule) throws Exception, IOException {
		File zipFile = null;
		Export export = task.getExport();
		export.setUserId(task.getUserId());
		if (export instanceof AlarmRecord) {
			zipFile = alarmQueryService.exportExcelOfAlarmRecords((AlarmRecord) export);
		} else if (export instanceof DriverCardRecord) {
			zipFile = driverCardRecordService.exportExcelOfDriverCardRecords((DriverCardRecord) export);
		} else if (export instanceof PhotoRecord) {
			zipFile = photoRecordService.exportExcelOfPhotoRecords((PhotoRecord) export);
		} else if (export instanceof PileRecord) {
			zipFile = pileQueryService.exportExcelOfPileRecords((PileRecord) export);
		} else if (export instanceof TripRecord) {
			zipFile = tripsQueryService.exportExcelOfTripRecords((TripRecord) export);
		} else if (export instanceof OnlineRecord) {
			zipFile = vehicleQueryService.exportExcelOfOnlineRecords((OnlineRecord) export);
		}
		task.setProgress(Progress.EIGHTY);
		schedule.setProgress(Progress.EIGHTY);
		kafkaTemplate.send(MessageBuilder.withPayload(schedule).setHeader(KafkaHeaders.TOPIC, schedule.getClass().getName()).build());
		FTPClientUtils.upload(host, username, password, filepath, export.getZipFileName(), zipFile);
		FileUtils.deleteFile(zipFile);
	}

	private void taskThirdStep(Task task, Schedule schedule) {
		String filePath = filepath + task.getFileName();
		task.setProgress(Progress.DONE);
		task.setFilePath(filePath);
		taskService.updateTask(task);
		schedule.setProgress(Progress.DONE);
		schedule.setFilePath(filePath);
		kafkaTemplate.send(MessageBuilder.withPayload(schedule).setHeader(KafkaHeaders.TOPIC, schedule.getClass().getName()).build());
	}

}
