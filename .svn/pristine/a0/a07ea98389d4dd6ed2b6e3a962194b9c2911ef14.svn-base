package com.tiamaes.bike.wallet.information.walletUser.service;

import javax.annotation.Resource;

import org.springframework.data.redis.core.HashOperations;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.tiamaes.bike.common.RedisKey;
import com.tiamaes.bike.common.bean.wallet.WalletUser;
import com.tiamaes.bike.wallet.information.walletUser.persistence.WalletUserMapper;

@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class WalletUserService implements WalletUserServiceInterface {
	
	@Resource
	private WalletUserMapper walletUserMapper;
	@Resource(name = "jsonRedisTemplate")
	private HashOperations<String, String, WalletUser> operator;

	@Override
	public WalletUser getWalletUserByUsername(String username) {
		Assert.notNull(username, "用户名不能为空!");
		WalletUser walletUser = operator.get(RedisKey.WALLETUSERS, username); 
		if (walletUser == null) {
			walletUser = walletUserMapper.getWalletUserByUsername(username);
			if (walletUser != null) {
				operator.putIfAbsent(RedisKey.WALLETUSERS, username, walletUser);
			}
		}
		return walletUser;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public WalletUser addWalletUser(WalletUser walletUser) {
		Assert.notNull(walletUser);
		walletUserMapper.addWalletUser(walletUser);
		WalletUser result = walletUserMapper.getWalletUserByUsername(walletUser.getUsername());
		if (result != null) {
			operator.putIfAbsent(RedisKey.WALLETUSERS, walletUser.getUsername(), walletUser);
		}
		return result;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public WalletUser updateWalletUser(WalletUser walletUser) {
		Assert.notNull(walletUser);
		walletUserMapper.updateWalletUser(walletUser);
		WalletUser result = walletUserMapper.getWalletUserByUsername(walletUser.getUsername());
		if (result != null) {
			operator.put(RedisKey.WALLETUSERS, walletUser.getUsername(), walletUser);
		}
		return result;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteWalletUser(WalletUser walletUser) {
		Assert.notNull(walletUser, "用户钱包信息不能为空!");
		walletUserMapper.deleteWalletUser(walletUser);
		WalletUser result = walletUserMapper.getWalletUserByUsername(walletUser.getUsername());
		if (result == null) {
			operator.delete(RedisKey.WALLETUSERS, walletUser.getUsername());
		}
	}

}
