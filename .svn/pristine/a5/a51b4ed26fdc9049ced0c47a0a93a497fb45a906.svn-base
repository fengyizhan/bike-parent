package com.tiamaes.bike.connector.service;

import java.util.Date;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.tiamaes.bike.common.RedisKey;
import com.tiamaes.bike.common.bean.connector.VehicleOnOffLineInfo;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.config.ChannelRepository;
import com.tiamaes.bike.connector.persistence.VehicleMapper;
import com.tiamaes.bike.connector.protocol.message.Message8001;

/**
 * 通信程序操作接口
 * 
 * @author Chen
 */
@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class HandlerService implements HandlerServiceInterface<Vehicle> {
	private static Logger logger = LogManager.getLogger(HandlerService.class);
	
	@Resource
	private VehicleMapper vehicleMapper;
	@Resource
	private ChannelRepository channelRepository;
	@Resource
	private CommandServiceInterface commandService;
	@Resource
	private KafkaTemplate<String, String> kafkaTemplate;
	@Resource(name = "stringRedisTemplate")
	private HashOperations<String, String, String> stringOperator;
	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public Message8001.Result register(Vehicle vehicle) {
		Assert.notNull(vehicle, "车辆信息不能为空!");
		return Message8001.Result.SUCCESS;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public boolean logout(Vehicle target) {
		return true;
	}
	
	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public boolean offline(Vehicle target){
		//下线更新下线记录
		VehicleOnOffLineInfo vehicleOnOffLineInfo = new VehicleOnOffLineInfo(target);
		vehicleOnOffLineInfo.setCreateDate(new Date());
		vehicleOnOffLineInfo.setState(VehicleOnOffLineInfo.State.OFFLINE);
		vehicleOnOffLineInfo.setVehicle(target);
		kafkaTemplate.send(MessageBuilder.withPayload(vehicleOnOffLineInfo).setHeader(KafkaHeaders.TOPIC, vehicleOnOffLineInfo.getClass().getName()).build());
		
		//断开连接，删除连接服务器信息
		stringOperator.delete(RedisKey.CONNECTS, target.getId());
		channelRepository.remove(target.getId());
		logger.debug(String.format("Auto [%s] has been offline...", target.getId()));
		return true;
	}
}
