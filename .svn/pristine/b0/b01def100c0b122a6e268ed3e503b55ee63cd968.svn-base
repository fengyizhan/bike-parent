package com.tiamaes.bike.api.information.station.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.tiamaes.bike.api.information.project.service.ProjectServiceInterface;
import com.tiamaes.bike.api.information.route.service.RouteServiceInterface;
import com.tiamaes.bike.api.information.station.service.StationServiceInterface;
import com.tiamaes.bike.common.bean.information.ReportValue;
import com.tiamaes.bike.common.bean.information.Station;
import com.tiamaes.logger.Operation;
import com.tiamaes.logger.TiamaesLogger;
import com.tiamaes.mybatis.PageInfo;
import com.tiamaes.mybatis.Pagination;
import com.tiamaes.security.core.annotation.CurrentUser;
import com.tiamaes.security.core.userdetails.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/information/station")
@Api(tags = {"station"}, description = "场区信息管理")
public class StationController {
	private static Logger logger = LogManager.getLogger(StationController.class);
	@Resource
	private StationServiceInterface stationService;
	@Resource
	private RouteServiceInterface routeService;
	@Resource
	private ProjectServiceInterface projectService;
	
	/**
	 * 初始化页面下拉框场区类型和报警的值
	 * @return
	 */
	@RequestMapping(value = "/init", method = RequestMethod.GET, produces = { "application/json" })
	@ApiOperation(value = "初始化列表", notes = "初始化页面下拉框场区类型和报警的值")
	public @ResponseBody Map<String,Object> init() {
		Map<String,Object> result = new HashMap<String,Object>();
		// 获取下拉列表-场区类型的值
		Station.Type[] types = Station.Type.values();
		result.put("types", types);
		result.put("reportValues", ReportValue.values());
		return result;
	}
	
	/**
	 * 页面展示场区列表信息
	 * @param station
	 * @param pathVariable
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = {"/page/{number:\\d+}","/page/{number:\\d+}/{pageSize:\\d+}"}, method = RequestMethod.POST)
	@ApiOperation(value = "场区列表", notes = "分页获取全部场区信息")
	@ApiImplicitParam(name = "station", value = "场区实体", required = true, dataType = "Station")
	public @ResponseBody PageInfo<Station> page(@RequestBody Station station, @PathVariable Map<String,String> pathVariable,@CurrentUser User operator) {
		int number = pathVariable.get("number") == null ? 1 : Integer.parseInt(pathVariable.get("number"));
		int pageSize = pathVariable.get("pageSize") == null ? 20 : Integer.parseInt(pathVariable.get("pageSize"));
		Pagination<Station> pagination = new Pagination<Station>(number, pageSize);
		List<Station> list = stationService.getListOfStations(station, pagination);
		return new PageInfo<Station>(list);
	}
	
	/**
	 * 验证场区名字是否存在
	 * @param id
	 * @param name
	 * @return
	 */
	@RequestMapping(value = {"/checkname/{name}", "/checkname/{name}/{id}"}, method = RequestMethod.GET, produces = {"application/json" })
	@ApiOperation(value = "验证场区", notes = " 验证场区名字是否存在")
	public @ResponseBody Map<String, Object> checkname(@PathVariable Optional<Integer> id, @PathVariable("name")String name) {
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("state", stationService.checkStationName(id, name));
		return result;
	}
	
	/**
	 * 根据id获取场区信息
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = { RequestMethod.GET}, produces = {"application/json" })
	@ApiOperation(value = "场区信息", notes = "根据id获取场区信息")
	public @ResponseBody Station get(@PathVariable("id")Integer id,@CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(id);
		}
		Station station = stationService.getStationById(id);
		return station;
	}
	
	/**
	 * 新增场区信息
	 * @param station
	 * @param operator
	 * @return
	 */
	@TiamaesLogger(operation = Operation.ADD)
	@RequestMapping(method = RequestMethod.PUT, produces = { "application/json" })
	@ApiOperation(value = "新增场区", notes = "新增场区信息",response=Station.class)
	@ApiImplicitParam(name = "station", value = "场区实体", required = true, dataType = "Station")
	public @ResponseBody Station add(@RequestBody Station station, @CurrentUser User operator){
		if(logger.isDebugEnabled()){
			logger.debug(station.toString());
		}
		int stationId = stationService.getId();
		station.setId(stationId);
		station = stationService.addStation(station);
		return station;
	}
	
	/**
	 * 更新场区信息
	 * @param station
	 * @param id
	 * @param operator
	 * @return
	 */
	@TiamaesLogger(operation = Operation.UPDATE)
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, produces = { "application/json" })
	@ApiOperation(value = "更新场区", notes = "更新场区信息",response=Station.class)
	@ApiImplicitParam(name = "station", value = "场区实体", required = true, dataType = "Station")
	public @ResponseBody Station update(@RequestBody Station station, @PathVariable("id")Integer id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){	
			logger.debug(station.toString());
		}
		station.setId(id);
		station = stationService.updateStation(station);
		return station;
	}
	
	/**
	 * 删除场区信息
	 * @param id
	 * @param operator
	 */
	@TiamaesLogger
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = { "application/json" })
	@ApiOperation(value = "删除场区", notes = "删除场区信息",response=Station.class)
	public @ResponseBody Station delete(@PathVariable("id")Integer id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){	
			logger.debug(id);
		}
		int total = routeService.getTotalUseOfStation(id);
		if (total > 0) {
			throw new IllegalArgumentException("存在与此场区关联的路线,请先解除关联再删除!");
		}
		total = projectService.getTotalUseOfStation(id);
		if (total > 0) {
			throw new IllegalArgumentException("存在与此场区关联的工程,请先解除关联再删除!");
		}
		Station station = stationService.getStationById(id);
		stationService.deleteStation(station);
		return station;
	}
	
	/**
	 * 获取分类场区下拉列表
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/pullTypeList/{type}", method = { RequestMethod.GET, RequestMethod.POST }, produces = {"application/json" })
	@ApiOperation(value = "获取工程和线路的场区", notes = "获取分类场区下拉列表")
	public @ResponseBody Map<String, Object> pullTypeList(@PathVariable("type")String type, @CurrentUser User operator) {
		Map<String,Object> result = new HashMap<String,Object>();
		List<Station> beginStations = new ArrayList<Station>();
		if ("route".equals(type)) {
			beginStations = stationService.getStationsByType(0);
		} else if ("project".equals(type)) {
			beginStations = stationService.getBeginStations();
		}
		result.put("beginStations", beginStations);
		result.put("endStations", stationService.getStationsByType(1));
		return result;
	}
	
	/**
	 * 获取场区下拉列表
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/pullList", method = { RequestMethod.GET, RequestMethod.POST }, produces = {"application/json" })
	@ApiOperation(value = "场区下拉列表", notes = "获取所有场区下拉列表")
	public @ResponseBody Map<String, Object> pullList(@CurrentUser User operator) {
		Map<String,Object> result = new HashMap<String,Object>();
		result.put("stations", stationService.getStations());
		return result;
	}
	
}
