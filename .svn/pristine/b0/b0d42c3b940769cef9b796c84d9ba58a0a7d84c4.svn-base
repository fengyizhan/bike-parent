package com.tiamaes.bike.storage.service;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.tiamaes.bike.common.RedisKey;
import com.tiamaes.bike.common.bean.connector.VehiclePhotoInfo;
import com.tiamaes.bike.common.bean.connector.VehiclePhotoInfo.State;
import com.tiamaes.bike.common.bean.system.User;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.common.utils.UUIDGenerator;
import com.tiamaes.bike.storage.persistence.VehiclePhotoInfoMapper;

@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class VehiclePhotoInfoService implements VehiclePhotoInfoServiceInterface {
	@SuppressWarnings("unused")
	private static Logger logger = LogManager.getLogger(VehiclePhotoInfoService.class);
	
	@Resource
	private VehicleServiceInterface vehicleService;
	@Resource
	private VehiclePhotoInfoMapper vehiclePhotoInfoMapper;
	@Resource(name = "jsonRedisTemplate")
	private HashOperations<String, String, User> userOperator;
	@Resource(name = "stringRedisTemplate")
	private HashOperations<String, String, String> stringOperator;

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public String addVehiclePhotoInfo(VehiclePhotoInfo vehiclePhotoInfo) throws Exception {
		Assert.notNull(vehiclePhotoInfo, "车辆拍照信息不能为空");
		Assert.notNull(vehiclePhotoInfo.getVehicle(), "车辆信息不能为空");
		String vehicleId = vehiclePhotoInfo.getVehicle().getId();
		Assert.notNull(vehicleId, "车辆id不能为空");
		// 通过id查询redis返回对应的车辆实体
		Vehicle vehicle = vehicleService.getVehicleById(vehicleId);
		User user = userOperator.get(RedisKey.VEHICLES_DRIVERS_VEHICLEID, vehicleId);
		vehiclePhotoInfo.setVehicle(vehicle);
		vehiclePhotoInfo.setUser(user);
		String temp = stringOperator.get(RedisKey.VEHICLEPHOTO_ID, vehicleId);
		String id = null;
		if(StringUtils.isBlank(temp)){
			vehiclePhotoInfo.setState(State.OTHER);
		}else{
			String[] idAndstate = temp.split(",");
			id = idAndstate[0];
			if ("in".equals(idAndstate[1])) {
				vehiclePhotoInfo.setState(State.INSTATION);
			} else if ("out".equals(idAndstate[1])) {
				vehiclePhotoInfo.setState(State.OUTSTATION);
				stringOperator.delete(RedisKey.VEHICLEPHOTO_ID, vehicleId);
			} else {
				vehiclePhotoInfo.setState(State.OTHER);
			}
		}
		
		// id不存在
		if (StringUtils.isBlank(id)) {
			id = UUIDGenerator.getUUID();
		}
		vehiclePhotoInfo.setId(id);
		// 设备拍照信息入库
		vehiclePhotoInfoMapper.addVehiclePhotoInfo(vehiclePhotoInfo);
		
		return id;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteVehiclePhotoInfo(String id) {
		vehiclePhotoInfoMapper.deleteVehiclePhotoInfo(id);
	}
}
