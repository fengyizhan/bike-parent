package com.tiamaes.bike.api.information.driver.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.tiamaes.bike.api.information.driver.service.DriverServiceInterface;
import com.tiamaes.bike.common.bean.information.Driver;
import com.tiamaes.bike.common.utils.UUIDGenerator;
import com.tiamaes.mybatis.PageInfo;
import com.tiamaes.mybatis.Pagination;
import com.tiamaes.security.core.annotation.CurrentUser;
import com.tiamaes.security.core.userdetails.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/information/driver")
@Api(tags = {"driver"}, description = "司机信息管理")
public class DriverController {
	private static Logger logger = LogManager.getLogger(DriverController.class);
	@Resource
	private DriverServiceInterface driverService;
	
	/**
	 * 司机列表页面 分页查询
	 * @param driver
	 * @param pathVariable
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = {"/page/{number:\\d+}","/page/{number:\\d+}/{pageSize:\\d+}"}, method = RequestMethod.POST, produces = {"application/json" })
	@ApiOperation(value = "司机列表", notes = "分页获取全部司机信息")
	@ApiImplicitParam(name = "driver", value = "司机实体", required = true, dataType = "Driver")
	public @ResponseBody PageInfo<Driver> page(@RequestBody Driver driver, @PathVariable Map<String,String> pathVariable,@CurrentUser User operator) {
		int number = pathVariable.get("number") == null ? 1 : Integer.parseInt(pathVariable.get("number"));
		int pageSize = pathVariable.get("pageSize") == null ? 20 : Integer.parseInt(pathVariable.get("pageSize"));
		Pagination<Driver> pagination = new Pagination<Driver>(number, pageSize);
		List<Driver> list = driverService.getAllDrivers(driver, pagination);
		return new PageInfo<Driver>(list);
	}
	/**
	 * 获取司机详情
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = { RequestMethod.GET}, produces = {"application/json" })
	@ApiOperation(value = "司机信息", notes = "根据id获取司机详情",response=Driver.class)
	public @ResponseBody Driver get(@PathVariable("id")String id,@CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(id);
		}
		Driver driver = driverService.getDriverInfoById(id);
		return driver;
	}
	/**
	 * 添加司机信息
	 * @param driver
	 * @param operator
	 * @return
	 */
	@RequestMapping(method = RequestMethod.PUT, produces = { "application/json" })
	@ApiOperation(value = "增加司机", notes = "新增司机信息",response=Driver.class)
	@ApiImplicitParam(name = "driver", value = "司机实体", required = true, dataType = "Driver")
	public @ResponseBody Driver add(@RequestBody Driver driver,@CurrentUser User operator){
		if(logger.isDebugEnabled()){
			logger.debug(driver.toString());
		}
		driver.setId(UUIDGenerator.getUUID());
		Driver drivers = driverService.addDriver(driver);
		return drivers;
	}
	/**
	 * 更新司机信息
	 * @param driver
	 * @param id
	 * @param operator
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, produces = { "application/json" })
	@ApiOperation(value = "更新司机", notes = "更新司机信息",response=Driver.class)
	@ApiImplicitParam(name = "driver", value = "司机实体", required = true, dataType = "Driver")
	public @ResponseBody Driver update(@RequestBody Driver driver, @PathVariable("id")String id,@CurrentUser User operator) {
		if(logger.isDebugEnabled()){	
			logger.debug(driver.toString());
		}
		driver.setId(id);
		driver = driverService.updateDriver(driver);
		return driver;
	}
	/**
	 * 删除司机信息
	 * @param id
	 * @param operator
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ApiOperation(value = "删除司机", notes = "删除司机信息")
	public @ResponseBody void delete(@PathVariable("id")String id,@CurrentUser User operator) {
		if(logger.isDebugEnabled()){	
			logger.debug(id);
		}
		if(StringUtils.isNotBlank(id)){
			Driver driver = driverService.getDriverInfoById(id);
			driverService.deleteDriver(driver);
		}
	}
	/**
	 * 初始化驾照类型和司机性别
	 * @return
	 */
	@RequestMapping(value = "/init", method = RequestMethod.GET)
	@ApiOperation(value = "驾照类型和司机性别", notes = "初始化驾照类型和司机性别")
	public @ResponseBody Map<String,Object> init() {
		Map<String,Object> result = new HashMap<String,Object>();
		result.put("licenseTypes", Driver.LicenseType.values());
		result.put("driverSexs", Driver.Sex.values());
		return result;
	}
	/**
	 * 验证从业资格证号是否存在
	 * @return
	 */
	@RequestMapping(value = "/licenseNo/{licenseNo}", method = RequestMethod.GET)
	@ApiOperation(value = "校验从业资格证", notes = "验证从业资格证号是否存在")
	public @ResponseBody Map<String,Object> checkLicenseNo(@PathVariable String licenseNo){
		Map<String,Object> result = new HashMap<String,Object>();
		boolean exist = driverService.checkLicenseNo(licenseNo);
		result.put("state", exist);
		return result;
	}
	/**
	 * 验证身份证号是否存在
	 * @return
	 */
	@RequestMapping(value = "/identityCard/{identityCard}", method = RequestMethod.GET)
	@ApiOperation(value = "校验身份证", notes = "验证身份证号是否存在")
	public @ResponseBody Map<String,Object> checkIdentityCard(@PathVariable String identityCard){
		Map<String,Object> result = new HashMap<String,Object>();
		boolean exist = driverService.checkIdentityCard(identityCard);
		result.put("state", exist);
		return result;
	}
	
}
