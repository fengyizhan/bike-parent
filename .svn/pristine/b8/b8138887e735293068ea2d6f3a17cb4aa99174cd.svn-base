package com.tiamaes.bike.reporter.information.project.service;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.tiamaes.bike.common.RedisKey;
import com.tiamaes.bike.common.bean.system.PointVector;
import com.tiamaes.bike.common.bean.Parameters;
import com.tiamaes.bike.common.bean.homepage.OngoingProjectInfo;
import com.tiamaes.bike.common.bean.homepage.OngoingProjectTripInfo;
import com.tiamaes.bike.common.bean.information.Project;
import com.tiamaes.bike.common.bean.information.Station;
import com.tiamaes.bike.common.bean.integrated.TripRecord;
import com.tiamaes.bike.reporter.information.project.persistence.ProjectMapper;
import com.tiamaes.bike.reporter.information.project.persistence.ProjectVehicleMapper;
import com.tiamaes.bike.reporter.integrated.trips.persistence.TripsQueryMapper;
import com.tiamaes.security.core.userdetails.User;

@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class ProjectService implements ProjectServiceInterface {
	
	@Resource
	private ProjectMapper projectMapper;
	@Resource
	private ProjectVehicleMapper projectVehicleMapper;
	
	@Resource
	private TripsQueryMapper tripsQueryMapper;
	
	@Resource(name = "jsonRedisTemplate")
	private HashOperations<String, String, Project> projectOperator;
	
	@Resource(name = "jsonRedisTemplate")
	private HashOperations<String, String, PointVector> pointVectorOperator;
	
	@Resource(name = "jsonRedisTemplate")
	private HashOperations<String, String, Station> stationOperator;

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public List<OngoingProjectInfo> getListOfOngoingProjectInfo(Map<String, Integer> ongoing, User operator) {
		List<OngoingProjectInfo> ongoingProjectInfos = new ArrayList<OngoingProjectInfo>();
		for (Map.Entry<String, Integer> entry : ongoing.entrySet()) {
			String projectId = entry.getKey();
			OngoingProjectInfo ongoingProjectInfo = new OngoingProjectInfo();
			Project project = projectOperator.get(RedisKey.PROJECTS, projectId);
			ongoingProjectInfo.setId(projectId);
			ongoingProjectInfo.setProjectName(project.getName());
			ongoingProjectInfo.setStartTime(DateFormatUtils.format(project.getStartTime(), "yyyy-MM-dd"));
			ongoingProjectInfo.setEndTime(DateFormatUtils.format(project.getEndTime(), "yyyy-MM-dd"));
			DecimalFormat df = new DecimalFormat("000");
		    String schedule = df.format((new Date().getTime()-project.getStartTime().getTime())/(1000*60*60*24));
			ongoingProjectInfo.setSchedule(schedule);
			Station beginStation = project.getBeginStation();
			beginStation = stationOperator.get(RedisKey.STATIONS, String.valueOf(beginStation.getId()));
			if (beginStation == null) {
				beginStation = new Station();
			}
			ongoingProjectInfo.setEarthWork(beginStation.getEarthWork());
			ongoingProjectInfo.setCarTotal(entry.getValue());
			TripRecord tripRecord = new TripRecord();
			tripRecord.setProjectId(projectId);
			
			Parameters<TripRecord> parameters = new Parameters<TripRecord>();
			parameters.setUser(operator);
			parameters.setModel(tripRecord);
			
			ongoingProjectInfo.setTransportTimes(tripsQueryMapper.getCountOfTripRecords(parameters));
			ongoingProjectInfos.add(ongoingProjectInfo);
		}
		return ongoingProjectInfos;
	}

	@Override
	public Project getProjectById(String id) {
		return projectOperator.get(RedisKey.PROJECTS, id);
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public List<OngoingProjectTripInfo> getListOfOngoingProjectInfoDetail(Project project) {
		List<OngoingProjectTripInfo> ongoingProjectTripInfos = tripsQueryMapper.getListOfOngoingProjectInfoDetail(project);
		for (OngoingProjectTripInfo ongoingProjectTripInfo : ongoingProjectTripInfos) {
			PointVector pointVector = pointVectorOperator.get(RedisKey.VEHICLES_POINTVECTORS, ongoingProjectTripInfo.getVehicleId());
			if (pointVector == null) {
				ongoingProjectTripInfo.setState("暂无");
			} else {
				ongoingProjectTripInfo.setState(pointVector.getInfo().getState().getName());
			}
		}
		return ongoingProjectTripInfos;
	}
	
	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public Map<String, Object> getMessageOfProject(String date) {
		Map<String, Integer> ongoing = new HashMap<String, Integer>();
		List<String> projectIds = projectMapper.getListOfOngoingProjectId(date);
		for (String projectId : projectIds) {
			ongoing.put(projectId, projectVehicleMapper.findVehiclesByPId(projectId).size());
		}
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("ongoing", ongoing);
		result.put("total", projectMapper.getTotalOfProjects(new Project()));
		return result;
	}

}
