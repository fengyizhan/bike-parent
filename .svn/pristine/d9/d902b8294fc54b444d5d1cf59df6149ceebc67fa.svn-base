package com.tiamaes.bike.wallet.information.pay.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.tiamaes.bike.common.bean.pay.PayRecharge;
import com.tiamaes.bike.wallet.information.pay.service.PayRechargeServiceInterface;
import com.tiamaes.mybatis.PageInfo;
import com.tiamaes.mybatis.Pagination;
import com.tiamaes.security.core.annotation.CurrentUser;
import com.tiamaes.security.core.userdetails.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/information/payrecharge")
@Api(tags = {"payrecharge"}, description = "用户支付充值记录管理")
public class PayRechargeController {
	
	private static Logger logger = LogManager.getLogger(PayRechargeController.class);
	@Resource
	private PayRechargeServiceInterface payRechargeService;
	
	/**
	 * 用户充值方式下拉列表
	 * @return
	 */
	@ApiOperation(value = "用户充值方式列表初始化", notes = "用户充值方式下拉列表初始化")
	@RequestMapping(value = "/init", method = RequestMethod.GET)
	public @ResponseBody Map<String,Object> init() {
		Map<String,Object> result = new HashMap<>();
		result.put("styles", PayRecharge.Style.values());
		return result;
	}
	
	/**
	 * 根据用户名获取用户充值记录信息
	 * @param username
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "用户线上支付充值记录列表", notes = "根据用户名获取用户充值记录列表")
	@RequestMapping(value = {"/page/{number:\\d+}","/page/{number:\\d+}/{pageSize:\\d+}"}, method = RequestMethod.POST)
	public @ResponseBody PageInfo<PayRecharge> get(@RequestBody PayRecharge payRecharge, @PathVariable Map<String,String> pathVariable, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(payRecharge.getUsername());
		}
		int number = pathVariable.get("number") == null ? 1 : Integer.parseInt(pathVariable.get("number"));
		int pageSize = pathVariable.get("pageSize") == null ? 10 : Integer.parseInt(pathVariable.get("pageSize"));
		Pagination<PayRecharge> pagination = new Pagination<>(number, pageSize);
		List<PayRecharge> recharges = payRechargeService.getListOfPayRechargesByUsername(payRecharge, pagination);
		return new PageInfo<PayRecharge>(recharges);
	}
	
	/**
	 * 新增用户充值信息
	 * @param recharge
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "新增用户线上支付充值信息", notes = "新增用户线上支付充值信息",response = PayRecharge.class)
	@ApiImplicitParam(name = "payRecharge", value = "用户线上支付充值实体", required = true, dataType = "PayRecharge")
	@RequestMapping(method = RequestMethod.PUT)
	public @ResponseBody PayRecharge add(@RequestBody PayRecharge payRecharge, @CurrentUser User operator){
		if(logger.isDebugEnabled()){
			logger.debug(payRecharge.toString());
		}
		payRecharge.setId(payRechargeService.getId());
		payRecharge.setCreateTime(new Date());
		payRecharge = payRechargeService.addPayRecharge(payRecharge);
		return payRecharge;
	}
	
	/**
	 * 更新用户充值信息
	 * @param payRecharge
	 * @param username
	 * @param operator
	 * @return
	 */
	@ApiOperation(value = "更新用户线上支付充值记录", notes = "更新用户线上支付充值记录",response = PayRecharge.class)
	@ApiImplicitParam(name = "payRecharge", value = "用户线上支付充值实体", required = true, dataType = "PayRecharge")
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
	public @ResponseBody PayRecharge update(@RequestBody PayRecharge payRecharge, @PathVariable("id")Integer id, @CurrentUser User operator) {
		if(logger.isDebugEnabled()){
			logger.debug(payRecharge.toString());
		}
		payRecharge.setId(id);
		payRecharge = payRechargeService.updatePayRecharge(payRecharge);
		return payRecharge;
	}
	
}
