package com.tiamaes.bike.connector.protocol.handler;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.tiamaes.bike.common.bean.information.Terminal;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.common.bean.message.Message;
import com.tiamaes.bike.common.bean.message.Message8001;
import com.tiamaes.bike.config.ChannelRepository;
import com.tiamaes.bike.connector.service.HandlerServiceInterface;

import io.netty.channel.Channel;
import io.netty.util.Attribute;
import io.netty.util.AttributeKey;

/**
 * 鉴权解析
 * 
 * @author lsl
 *
 */
@Component
public class Protocol0102Handler extends ProtocolHandler {
	private static Logger logger = LogManager.getLogger(Protocol0102Handler.class);
	
	@Autowired
	private HandlerServiceInterface handlerService;

	@Autowired
	private ChannelRepository channelRepository;
	
	@Override
	public Message execute(Channel channel, Message request) throws Exception {
		String simNo = request.getHeader().getSimNo();

		// 通过sim卡号查询数据库返回对应的鉴权码
		Vehicle target = handlerService.getVehicleBySimNo(simNo);
		Terminal terminal = handlerService.getTerminalBySimNo(simNo);
		String registerNoOut = "";
		if(target != null){
			target.setTerminal(terminal);
			if (target.getTerminal() != null) {
				target.setSimCode(simNo);
				registerNoOut = target.getTerminal().getAuthentication();
			}
		}

		// 获取传入的鉴权码与查询的鉴权码匹配
		byte result = (byte) 1;
		byte[] bytebody = request.getBody();
		String registerNoIn = new String(bytebody, "GBK").trim();
		if (registerNoOut != null && !"".equals(registerNoOut) && registerNoOut.equals(registerNoIn)) {
			result = (byte) 0;
			Channel channelOld = channelRepository.get(simNo);
			if (channelOld != null) {
				channelRepository.remove(simNo);
				channelOld.close();
				return null;
			}
			
			// 如果是鉴权包，并且鉴权通过，则将对应车辆信息放入连接信息中
			Attribute<Vehicle> attribute = channel.attr(AttributeKey.valueOf("target"));
			Vehicle vehicle = attribute.get();
			boolean sendOnLine = false;
			if(vehicle == null){
				sendOnLine = true;
			}
			handlerService.handle0102(target ,sendOnLine);
			
			attribute.set(target);
			channelRepository.put(simNo, channel);
			String address = channel.remoteAddress().toString();
			
			if(logger.isDebugEnabled()){
				logger.debug("[0102][{}] has authentication, the remote address is [{}].", simNo, address);
			}
		}
		Message8001 response = new Message8001(simNo);
		response.setResponseBody(request.getHeader(), result);
		return response;
	}

}
