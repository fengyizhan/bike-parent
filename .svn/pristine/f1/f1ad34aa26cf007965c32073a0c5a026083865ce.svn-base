package com.tiamaes.bike.api.information.driver.service;

import java.util.List;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.tiamaes.bike.api.information.driver.persistence.DriverMapper;
import com.tiamaes.bike.common.RedisKey;
import com.tiamaes.bike.common.bean.information.Driver;
import com.tiamaes.mybatis.PageHelper;
import com.tiamaes.mybatis.Pagination;

@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class DriverService implements DriverServiceInterface {
	@SuppressWarnings("unused")
	private static Logger logger = LogManager.getLogger(DriverService.class);
	@Resource
	private DriverMapper driverMapper;
	@Resource
	private StringRedisTemplate stringRedisTemplate;
	@Resource(name = "jsonRedisTemplate")
	private HashOperations<String, String, Driver> operator;
	
	
	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public Driver getDriverInfoById(String id) {
		Assert.notNull(id, "驾驶员编号不能为空!");
		
		Driver driver = operator.get(RedisKey.DRIVERS, id);
		return driver;
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public List<Driver> getAllDrivers(Driver driver, Pagination<Driver> pagination) {
		Assert.notNull(pagination, "分页对象不能为空");
		PageHelper.startPage(pagination);
		return driverMapper.getAllDrivers(driver);
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public int getTotalOfDrivers(Driver driver) {
		return driverMapper.getTotalOfDrivers(driver);
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public Driver addDriver(Driver driver) {
		Assert.notNull(driver,"驾驶员不能为空!");
		driverMapper.addDriver(driver);
		
		Driver newDriver = driverMapper.getDriverInfoById(driver.getId());
		
		if(newDriver!=null){
			operator.putIfAbsent(RedisKey.DRIVERS, driver.getId(), newDriver);
			//主键和身份证号做映射
			stringRedisTemplate.opsForHash().putIfAbsent(RedisKey.DRIVERS_LICENSENO, newDriver.getLicenseNo(), newDriver.getId());
			
			return getDriverInfoById(newDriver.getId());
		}else{
			return null;
		}
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public Driver updateDriver(Driver driver) {
		Assert.notNull(driver,"驾驶员不能为空!");
		driverMapper.updateDriver(driver);
		//取出原有的driver实体
		Driver oldDriver = getDriverInfoById(driver.getId());
		
		operator.put(RedisKey.DRIVERS, driver.getId(), driver);
		//如果从业资格证被修改，先删除原有的映射，
		if(!oldDriver.getLicenseNo().equals(driver.getLicenseNo())){
			stringRedisTemplate.opsForHash().delete(RedisKey.DRIVERS_LICENSENO, oldDriver.getLicenseNo());
			//主键和身份证号做映射
			stringRedisTemplate.opsForHash().put(RedisKey.DRIVERS_LICENSENO, driver.getLicenseNo(), driver.getId());
		}
		return getDriverInfoById(driver.getId());
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public void deleteDriver(Driver driver) {
		Assert.notNull(driver, "驾驶员不能为空!");
		driverMapper.deleteDriver(driver);
		
		operator.delete(RedisKey.DRIVERS, driver.getId());
		stringRedisTemplate.opsForHash().delete(RedisKey.DRIVERS_LICENSENO, driver.getLicenseNo());
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public boolean checkLicenseNo(String licenseNo) {
		return driverMapper.checkLicenseNo(licenseNo);
	}

	@Override
	@Transactional(propagation = Propagation.NOT_SUPPORTED)
	public boolean checkIdentityCard(String identityCard) {
		return driverMapper.checkIdentityCard(identityCard);
	}
}
