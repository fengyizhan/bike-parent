package com.tiamaes.bike.common.bean.connector;

import java.io.IOException;
import java.io.Serializable;
import java.util.Date;

import org.apache.commons.lang.StringUtils;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.tiamaes.bike.common.bean.system.User;
import com.tiamaes.bike.common.bean.information.Vehicle;
import com.tiamaes.bike.common.utils.UUIDGenerator;

/**
 * 拍照信息
 * 
 * @author kangty
 *
 */
public class VehiclePhotoInfo implements Serializable {
	private static final long serialVersionUID = 316850560484058955L;

	public VehiclePhotoInfo() {
	}
	
	public VehiclePhotoInfo(Vehicle vehicle, User user) {
		this.setId(UUIDGenerator.getUUID());
		this.setVehicle(vehicle);
		this.setUser(user);
	}
	
	/**
	 * 日志编号
	 */
	private String id;
	/**
	 * 车辆信息(公司编号，公司名称，车队编号，车队名称，车辆编号，车牌号，SIM卡号)
	 */
	private Vehicle vehicle;
	/**
	 * 司机信息(司机身份证号，司机姓名，司机联系电话)
	 */
	private User user;
	/**
	 * 拍照时间
	 */
	private Date createTime;
	/**
	 * 经度
	 */
	private Double lng;
	/**
	 * 纬度
	 */
	private Double lat;
	/**
	 * 照片路径
	 */
	private String path;
	/**
	 * 拍照状态(0:进场拍照, 1:出场拍照, 2:其他)
	 */
	@JsonDeserialize(using = State.Deserializer.class)
	private State state;
	
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Vehicle getVehicle() {
		return vehicle;
	}

	public void setVehicle(Vehicle vehicle) {
		this.vehicle = vehicle;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public Double getLng() {
		return lng;
	}

	public void setLng(Double lng) {
		this.lng = lng;
	}

	public Double getLat() {
		return lat;
	}

	public void setLat(Double lat) {
		this.lat = lat;
	}

	public String getPath() {
		return path;
	}

	public void setPath(String path) {
		this.path = path;
	}
	
	public State getState() {
		return state;
	}

	public void setState(State state) {
		this.state = state;
	}

	@JsonFormat(shape = JsonFormat.Shape.OBJECT)
	public static enum State implements com.tiamaes.bike.common.Enum<State> {
		
		INSTATION("进场拍照"), OUTSTATION("出场拍照"), OTHER("其他");
		
		private String name;
		
		private State(String name) {
			this.name = name;
		}

		@Override
		@JsonProperty("name")
		public String getName() {
			return this.name;
		}

		@Override
		@JsonProperty("value")
		public String getValue() {
			return name();
		}

		@Override
		@JsonProperty("index")
		public int getIndex() {
			return this.ordinal();
		}
		
		@JsonCreator
		public static State valueOf(@JsonProperty("index") final int index) {
			State[] roleTypes = State.values();
			if (index >= 0 && index < roleTypes.length) {
				return roleTypes[index];
			}
			return null;
		}

		public static class Deserializer extends JsonDeserializer<State> {
			@Override
			public State deserialize(JsonParser jp, DeserializationContext ctxt)
					throws IOException, JsonProcessingException {
				JsonToken currentToken = jp.getCurrentToken();
				switch (currentToken) {
				case VALUE_NUMBER_INT:
					return State.valueOf(jp.getIntValue());
				case VALUE_STRING:
					String text = jp.getText();
					if (StringUtils.isNotBlank(text)) {
						return State.valueOf(text.trim().toUpperCase());
					}
				case START_OBJECT:
					JsonNode jsonNode = ((JsonNode) jp.readValueAsTree()).get("value");
					if (jsonNode != null && jsonNode.isValueNode()) {
						text = jsonNode.asText();
						if (StringUtils.isNotBlank(text)) {
							return State.valueOf(text.trim().toUpperCase());
						}
					}
				default:
					break;
				}
				return null;
			}
		}
		
	}
	
}
